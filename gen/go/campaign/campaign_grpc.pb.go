// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: campaign/campaign.proto

package campaignv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CampaignTools_CreateCampaign_FullMethodName      = "/campaign.CampaignTools/CreateCampaign"
	CampaignTools_DeleteCampaign_FullMethodName      = "/campaign.CampaignTools/DeleteCampaign"
	CampaignTools_JoinCampaign_FullMethodName        = "/campaign.CampaignTools/JoinCampaign"
	CampaignTools_LeaveCampaign_FullMethodName       = "/campaign.CampaignTools/LeaveCampaign"
	CampaignTools_GetCreatedCampaigns_FullMethodName = "/campaign.CampaignTools/GetCreatedCampaigns"
	CampaignTools_GetCurrentCampaigns_FullMethodName = "/campaign.CampaignTools/GetCurrentCampaigns"
)

// CampaignToolsClient is the client API for CampaignTools service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampaignToolsClient interface {
	CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*CreateCampaignResponse, error)
	DeleteCampaign(ctx context.Context, in *DeleteCampaignRequest, opts ...grpc.CallOption) (*DeleteCampaignResponse, error)
	JoinCampaign(ctx context.Context, in *JoinCampaignRequest, opts ...grpc.CallOption) (*JoinCampaignResponse, error)
	LeaveCampaign(ctx context.Context, in *LeaveCampaignRequest, opts ...grpc.CallOption) (*LeaveCampaignResponse, error)
	GetCreatedCampaigns(ctx context.Context, in *GetCreatedCampaignsRequest, opts ...grpc.CallOption) (*GetCreatedCampaignsResponse, error)
	GetCurrentCampaigns(ctx context.Context, in *GetCurrentCampaignsRequest, opts ...grpc.CallOption) (*GetCurrentCampaignsResponse, error)
}

type campaignToolsClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignToolsClient(cc grpc.ClientConnInterface) CampaignToolsClient {
	return &campaignToolsClient{cc}
}

func (c *campaignToolsClient) CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*CreateCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCampaignResponse)
	err := c.cc.Invoke(ctx, CampaignTools_CreateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignToolsClient) DeleteCampaign(ctx context.Context, in *DeleteCampaignRequest, opts ...grpc.CallOption) (*DeleteCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCampaignResponse)
	err := c.cc.Invoke(ctx, CampaignTools_DeleteCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignToolsClient) JoinCampaign(ctx context.Context, in *JoinCampaignRequest, opts ...grpc.CallOption) (*JoinCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinCampaignResponse)
	err := c.cc.Invoke(ctx, CampaignTools_JoinCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignToolsClient) LeaveCampaign(ctx context.Context, in *LeaveCampaignRequest, opts ...grpc.CallOption) (*LeaveCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveCampaignResponse)
	err := c.cc.Invoke(ctx, CampaignTools_LeaveCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignToolsClient) GetCreatedCampaigns(ctx context.Context, in *GetCreatedCampaignsRequest, opts ...grpc.CallOption) (*GetCreatedCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreatedCampaignsResponse)
	err := c.cc.Invoke(ctx, CampaignTools_GetCreatedCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignToolsClient) GetCurrentCampaigns(ctx context.Context, in *GetCurrentCampaignsRequest, opts ...grpc.CallOption) (*GetCurrentCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentCampaignsResponse)
	err := c.cc.Invoke(ctx, CampaignTools_GetCurrentCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignToolsServer is the server API for CampaignTools service.
// All implementations must embed UnimplementedCampaignToolsServer
// for forward compatibility.
type CampaignToolsServer interface {
	CreateCampaign(context.Context, *CreateCampaignRequest) (*CreateCampaignResponse, error)
	DeleteCampaign(context.Context, *DeleteCampaignRequest) (*DeleteCampaignResponse, error)
	JoinCampaign(context.Context, *JoinCampaignRequest) (*JoinCampaignResponse, error)
	LeaveCampaign(context.Context, *LeaveCampaignRequest) (*LeaveCampaignResponse, error)
	GetCreatedCampaigns(context.Context, *GetCreatedCampaignsRequest) (*GetCreatedCampaignsResponse, error)
	GetCurrentCampaigns(context.Context, *GetCurrentCampaignsRequest) (*GetCurrentCampaignsResponse, error)
	mustEmbedUnimplementedCampaignToolsServer()
}

// UnimplementedCampaignToolsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCampaignToolsServer struct{}

func (UnimplementedCampaignToolsServer) CreateCampaign(context.Context, *CreateCampaignRequest) (*CreateCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedCampaignToolsServer) DeleteCampaign(context.Context, *DeleteCampaignRequest) (*DeleteCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (UnimplementedCampaignToolsServer) JoinCampaign(context.Context, *JoinCampaignRequest) (*JoinCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCampaign not implemented")
}
func (UnimplementedCampaignToolsServer) LeaveCampaign(context.Context, *LeaveCampaignRequest) (*LeaveCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCampaign not implemented")
}
func (UnimplementedCampaignToolsServer) GetCreatedCampaigns(context.Context, *GetCreatedCampaignsRequest) (*GetCreatedCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreatedCampaigns not implemented")
}
func (UnimplementedCampaignToolsServer) GetCurrentCampaigns(context.Context, *GetCurrentCampaignsRequest) (*GetCurrentCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentCampaigns not implemented")
}
func (UnimplementedCampaignToolsServer) mustEmbedUnimplementedCampaignToolsServer() {}
func (UnimplementedCampaignToolsServer) testEmbeddedByValue()                       {}

// UnsafeCampaignToolsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampaignToolsServer will
// result in compilation errors.
type UnsafeCampaignToolsServer interface {
	mustEmbedUnimplementedCampaignToolsServer()
}

func RegisterCampaignToolsServer(s grpc.ServiceRegistrar, srv CampaignToolsServer) {
	// If the following call pancis, it indicates UnimplementedCampaignToolsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CampaignTools_ServiceDesc, srv)
}

func _CampaignTools_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignToolsServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignTools_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignToolsServer).CreateCampaign(ctx, req.(*CreateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignTools_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignToolsServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignTools_DeleteCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignToolsServer).DeleteCampaign(ctx, req.(*DeleteCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignTools_JoinCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignToolsServer).JoinCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignTools_JoinCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignToolsServer).JoinCampaign(ctx, req.(*JoinCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignTools_LeaveCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignToolsServer).LeaveCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignTools_LeaveCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignToolsServer).LeaveCampaign(ctx, req.(*LeaveCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignTools_GetCreatedCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreatedCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignToolsServer).GetCreatedCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignTools_GetCreatedCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignToolsServer).GetCreatedCampaigns(ctx, req.(*GetCreatedCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignTools_GetCurrentCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignToolsServer).GetCurrentCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignTools_GetCurrentCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignToolsServer).GetCurrentCampaigns(ctx, req.(*GetCurrentCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampaignTools_ServiceDesc is the grpc.ServiceDesc for CampaignTools service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampaignTools_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campaign.CampaignTools",
	HandlerType: (*CampaignToolsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCampaign",
			Handler:    _CampaignTools_CreateCampaign_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _CampaignTools_DeleteCampaign_Handler,
		},
		{
			MethodName: "JoinCampaign",
			Handler:    _CampaignTools_JoinCampaign_Handler,
		},
		{
			MethodName: "LeaveCampaign",
			Handler:    _CampaignTools_LeaveCampaign_Handler,
		},
		{
			MethodName: "GetCreatedCampaigns",
			Handler:    _CampaignTools_GetCreatedCampaigns_Handler,
		},
		{
			MethodName: "GetCurrentCampaigns",
			Handler:    _CampaignTools_GetCurrentCampaigns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campaign/campaign.proto",
}
